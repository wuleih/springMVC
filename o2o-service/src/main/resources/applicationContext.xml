<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:solr="http://www.springframework.org/schema/data/solr"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
   http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-4.1.xsd 
   http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.1.xsd   
   http://www.springframework.org/schema/data/solr http://www.springframework.org/schema/data/solr/spring-solr-2.0.xsd 
   ">
	<!-- 属性配置文件 -->
	<context:property-placeholder location="classpath:/config.properties" />
	
	<!-- Activates annotation-based bean configuration -->
	<context:annotation-config />

	<!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。 -->
	<context:component-scan base-package="com.o2o">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<!-- 启动对@Aspectj的支持 true为cglib，false为jdk代理，为true的话，会导致拦截不了mybatis的mapper-->
    <aop:aspectj-autoproxy proxy-target-class="false" />
	
	<!-- 配置dbcp数据源 -->
	<bean id="dataSource" destroy-method="close"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName">
			<value>${jdbc.driver}</value>
		</property>
		<property name="url">
			<value>${jdbc.url}</value>
		</property>
		<property name="username">
			<value>${jdbc.username}</value>
		</property>
		<property name="password">
			<value>${jdbc.password}</value>
		</property>
		<!-- 池启动时创建的连接数量 -->
		<property name="initialSize" value="5" />
		<!-- 同一时间可以从池分配的最多连接数量。设置为0时表示无限制。 -->
		<property name="maxActive" value="30" />
		<!-- 池里不会被释放的最多空闲连接数量。设置为0时表示无限制。 -->
		<property name="maxIdle" value="20" />
		<!-- 在不新建连接的条件下，池中保持空闲的最少连接数。 -->
		<property name="minIdle" value="3" />
		<!-- 设置自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 自动回收超时时间(以秒数为单位) -->
		<property name="removeAbandonedTimeout" value="200" />
		<!-- 设置在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="true" />
		<!-- 等待超时以毫秒为单位，在抛出异常之前，池等待连接被回收的最长时间（当没有可用连接时）。设置为-1表示无限等待。 -->
		<property name="maxWait" value="100" />
		<!-- 验证连接是否成功 , SQL SELECT 指令至少要返回一行 -->
		<property name="validationQuery" value="select 1" />
		<!-- 大于 0 ，进行连接空闲时间判断，或为 0 ，对空闲的连接不进行验证 -->
		<property name="minEvictableIdleTimeMillis" value="30000" />
		<!-- 失效检查线程运行时间间隔，如果小于等于 0 ，不会启动检查线程 -->
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
	</bean>
	
	<!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <!-- 表示在sqlmap包或以下所有目录中，以*Mapper.xml结尾所有文件 -->
                <value>classpath*:com/o2o/**/*Mapper.xml</value><!-- com.o2o.dao... 命名方式tomcat不认 -->
            </list>
        </property>
    </bean>
           
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
		<property name="basePackage" value="com.o2o.mapper" /> 
	</bean>
        
    <!-- 事物管理 -->
    <bean id="transactionManager"
  		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
  		<property name="dataSource" ref="dataSource" />
 	</bean>
 	
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
		<tx:method name="delete*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />  
		<tx:method name="insert*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />  
		<tx:method name="add*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="save*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="update*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />  
		<tx:method name="create*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="audit*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="sales*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="purchase*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="commit*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="auto*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="pick*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="clear*" propagation="REQUIRED" read-only="false"  rollback-for="java.lang.Exception" />
		<tx:method name="find*" propagation="SUPPORTS"/>
		<tx:method name="get*" propagation="SUPPORTS"/>  
		<tx:method name="select*" propagation="SUPPORTS"/>  
		</tx:attributes>  
	</tx:advice>  

	<!-- 事务切片层 -->
	<aop:config>   
		<aop:pointcut id="pc" expression="execution(public * com.o2o.service.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="txAdvice" />  
	</aop:config>
	
	<!-- 注解驱动事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- 配置sqlSessionTemplate --> 
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">  
        <constructor-arg index="0" ref="sqlSessionFactory" />  
    </bean> 
	
	<bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg index="0" value="UTF-8"></constructor-arg>
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="json2HttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
	<bean id="resourceHttpMessageConverter" class="org.springframework.http.converter.ResourceHttpMessageConverter"></bean>
	<bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"></bean>
	<bean id="sourceHttpMessageConverter" class="org.springframework.http.converter.xml.SourceHttpMessageConverter"></bean>

	<!-- 国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>messages.messages</value>
			</list>
		</property>
	</bean>
	
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.FixedLocaleResolver">
		<property name="defaultLocale" value="zh_CN" />
	</bean>
	
	<!-- 分页插件，根据方言自动添加分页信息，默认要求 -->  
    <!-- <bean id="pagePlugin" class="com.xinnet.core.mybatis.plugin.PagePlugin">  
        <property name="properties">  
            <props>  
                <prop key="dialect">com.xinnet.core.mybatis.dialet.MySQLDialect</prop>  
                <prop key="pageSqlId">.*query.*</prop>  
            </props>  
        </property>  
    </bean> -->
	
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
    	<property name="minIdle" value="${redis.pool.minIdle}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />  
        <property name="maxTotal" value="${redis.pool.maxActive}" />  
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />  
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />  
    </bean>  
    
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="password" value="${redis.password}" />
        <property name="usePool" value="true" />
        <property name="poolConfig" ref="poolConfig" />
    </bean> 
    
    <!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<property name="keySerializer">
			<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>	
		<property name="valueSerializer">
			<bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashKeySerializer">  
	       <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
	    </property>
	    <property name="hashValueSerializer">
	       <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
	    </property>
	</bean>
    
    <!-- redis session -->
    <!-- <bean id="httpSessionStrategy" class="org.springframework.session.web.http.CookieHttpSessionStrategy"/>    
	<bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<property name="httpSessionStrategy" ref="httpSessionStrategy"></property>
		<property name="maxInactiveIntervalInSeconds" value="1800" />
	</bean> -->
	
	<bean id="erpSystemInfo" class="com.o2o.ao.SystemInfo">
		<property name="mobileDomain"><value>${app.mobile.domain}</value></property>
		<property name="imageDomain"><value>${image.domain}</value></property>	
		<property name="weiXinAppId"><value>${micro.msg.appId}</value></property>
		<property name="weiXinEncodingAesKey"><value>${micro.msg.encodingAESKey}</value></property>	
	    <property name="weiXinCookieEntry"><value>${micro.msg.cookie.entry}</value></property>  
	    <property name="weiXinCookieRedirectUri"><value>${micro.msg.cookie.auth.redirect.uri}</value></property> 
	    <property name="weiXinCookieAppid"><value>${micro.msg.cookie.appid}</value></property>	
	    <property name="weiXinCookieEnableBind"><value>${micro.msg.cookie.auth.enable.bind}</value></property>
	</bean> 
		
	<!-- 定时任务 -->
	<task:scheduler id="taskScheduler" pool-size="10"/>  
	<task:annotation-driven scheduler="taskScheduler" mode="proxy" />
</beans> 
